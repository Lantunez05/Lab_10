/* 
 * File:   Prelab_10.c
 * Author: Luis Antunez
 *
 * Created on 6 de mayo de 2023, 01:19 AM
 */

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.


#include <xc.h>
#include <pic16f887.h>
#include <stdlib.h>
#include <stdio.h>
#define _XTAL_FREQ 10000000

uint8_t cont;
char recept;
void cadena(char txt[]); // Declaración de la función "cadena" 
void setup(void);
/************Interrupciones***********************/
void __interrupt() isr(void){
    if(PIR1bits.RCIF)
    {
       while(!PIR1bits.RCIF); 
       recept = RCREG; 
        if(recept == '+'){
            PORTD++;
        }
         else if(recept == '-'){
            PORTD--;
         }
    }
    
    if(INTCONbits.RBIF)
    {
      
        if(PORTBbits.RB0){
            //while(RB0 == 0);
            PORTA++;
        }
        else if(PORTBbits.RB1){
            //while(RB1 == 0);
            PORTA--;
        }
        
        INTCONbits.RBIF= 0;
    }    
    
    
}
/************Codigo principal****************/

void main (void){
    setup();
    char texto[] = " Manda un valor al PIC: \r "; // Cadena de caracteres a enviar
    while (1)
    {
        cadena(texto); // Llamada a la cadena
        __delay_ms(5000); // Tiempos de espera de 5seg 
        
    }

}

/********Funciones****************/

void cadena(char txt[]){
    int i = 0;
    while(txt[i] != '\0'){
        while(!TXSTAbits.TRMT); // Esperamos a que el registro de transmisión esté vacío
        TXREG = txt[i]; // Enviamos el caracter 
        i++;
    }
}

void setup(void)
{
    //Configuracion de entradas y salidas
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0;
    TRISB = 0b0011;
    TRISD = 0;
    
 
    
    PORTA = 0;
    PORTB = 0;
    //PORTC = 0;
    PORTD = 0;
  
    OSCCONbits.IRCF = 0b100;
    OSCCONbits.SCS = 1;
    
    //Configuracion de TX y RX
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    
    BAUDCTLbits.BRG16 = 1;
    
    SPBRG = 25;
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1;
    RCSTAbits.RX9 = 0;        
    RCSTAbits.CREN = 1;
    
    TXSTAbits.TXEN = 1; //Habilitamos la transmision
    
    ADIE = 1;
    ADIF = 0;
    IOCB = 0xFF;
    INTCONbits.RBIE = 1;
    INTCONbits.RBIF = 0;
    
    
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
    return;
    
}
